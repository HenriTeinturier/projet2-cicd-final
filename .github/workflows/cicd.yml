name: CI/CD workflow

env:
  SERVER_PRODUCTION_IP: 13.51.156.206
  SERVER_PRODUCTION_USER: ubuntu
  SERVER_PRODUCTION_PORT: 2222
  SERVER_STAGING_IP: 51.20.2.176
  SERVER_STAGING_USER: ubuntu
  SERVER_STAGING_PORT: 2222

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  tests-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: install Node.js
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"
      - name: Install dependencies
        run: npm ci
      - name: Run Linter
        run: npm run lint
      - name: npm audit
        run: npm audit --production --audit-level=high

  tests-node-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./node-api
    strategy:
      fail-fast: true
      matrix:
        npm_commande:
          [
            "run test:ci",
            "run lint",
            "audit --production --audit-level=critical",
          ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: install Node.js
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: "./node-api/package-lock.json"
      - name: Install dependencies
        run: npm ci
      - name: Lancer les tests
        run: npm ${{ matrix.npm_commande }}
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build-frontend-and-api:
    runs-on: ubuntu-latest
    needs: [tests-frontend, tests-node-api]
    strategy:
      matrix:
        include:
          - context_name: frontend
            image_name: ghcr.io/henriteinturier/projet2-cicd-final/frontend
          - context_name: node-api
            image_name: ghcr.io/henriteinturier/projet2-cicd-final/node-api
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image_name }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.context_name  }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,name=cache

  tests-e2e:
    needs: [build-frontend-and-api]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Lancement des tests e2e
        run: docker compose up --exit-code-from cypress --abort-on-container-exit
      - name: Fermeture conteneurs et volumes
        run: docker compose down -v --remove-orphans

  deploy-staging:
    needs: [tests-e2e]
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: http://${{ env.SERVER_STAGING_IP }}
    steps:
      # besoin du checkout pour récupérer le fichier docker-compose.production.yml
      # d'ailleurs il faut créer le fichier docker-compose.production.yml dans le repo On peut le faire de suite avant de finir
      - name: Checkout
        uses: actions/checkout@v4
      - name: deployer sur le serveur de staging
        run: |
          # on active l'agent ssh
          eval $(ssh-agent -s)
          # on ajoute la clé ssh dans l'agent ssh
          ssh-add - <<< "${{ secrets.VPS_KEY }}"
          # on crée le répertoire ~/.ssh s'il n'existe pas
          mkdir -p ~/.ssh
          # on ajoute la fingerprint du vps dans le fichier known_hosts
          ssh-keyscan -H -p ${{ env.SERVER_STAGING_PORT }} ${{ env.SERVER_STAGING_IP }} >> ~/.ssh/known_hosts
          # on copie le fichier docker-compose.production.yml sur le serveur de production
          scp -P ${{ env.SERVER_STAGING_PORT }} docker-compose.production.yml ${{ env.SERVER_STAGING_USER }}@${{ env.SERVER_STAGING_IP }}:~/docker-compose.production.yml
          # on connecte docker du vps à github container registry (packages)
          ssh -p ${{ env.SERVER_STAGING_PORT }} ${{ env.SERVER_STAGING_USER }}@${{ env.SERVER_STAGING_IP }} "sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}"
          # on récupère les images
          ssh -p ${{ env.SERVER_STAGING_PORT }} ${{ env.SERVER_STAGING_USER }}@${{ env.SERVER_STAGING_IP }} "sudo docker compose -f ~/docker-compose.production.yml pull"
          # on démarre les conteneurs
          ssh -p ${{ env.SERVER_STAGING_PORT }} ${{ env.SERVER_STAGING_USER }}@${{ env.SERVER_STAGING_IP }} "sudo docker compose -f ~/docker-compose.production.yml up -d --force-recreate"

  deploy-production:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    # on fait ce job que si on est sur branch main
    if: github.ref == 'refs/heads/main'
    # on ajoute les variables d'environnement
    environment:
      name: production
      url: http://${{ env.SERVER_PRODUCTION_IP }}
    steps:
      # besoin du checkout pour récupérer le fichier docker-compose.production.yml
      # d'ailleurs il faut créer le fichier docker-compose.production.yml dans le repo On peut le faire de suite avant de finir
      - name: Checkout
        uses: actions/checkout@v4
      - name: deployer sur le serveur de production
        run: |
          # on active l'agent ssh
          eval $(ssh-agent -s)
          # on ajoute la clé ssh dans l'agent ssh
          ssh-add - <<< "${{ secrets.VPS_KEY }}"
          # on crée le répertoire ~/.ssh s'il n'existe pas
          mkdir -p ~/.ssh
          # on ajoute la fingerprint du vps dans le fichier known_hosts
          ssh-keyscan -H -p ${{ env.SERVER_PRODUCTION_PORT }} ${{ env.SERVER_PRODUCTION_IP }} >> ~/.ssh/known_hosts
          # on copie le fichier docker-compose.production.yml sur le serveur de production
          scp -P ${{ env.SERVER_PRODUCTION_PORT }} docker-compose.production.yml ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }}:~/docker-compose.production.yml
          # on connecte docker du vps à github container registry (packages)
          ssh -p ${{ env.SERVER_PRODUCTION_PORT }} ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }} "sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}"
          # on récupère les images
          ssh -p ${{ env.SERVER_PRODUCTION_PORT }} ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }} "sudo docker compose -f ~/docker-compose.production.yml pull"
          # on démarre les conteneurs
          ssh -p ${{ env.SERVER_PRODUCTION_PORT }} ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }} "sudo docker compose -f ~/docker-compose.production.yml up -d --force-recreate"

  tests-e2e-production:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    environment:
      name: production-tests
      url: http://${{ env.SERVER_PRODUCTION_IP }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker images
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-cypress-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-cypress-
      - name: Pull Cypress image
        run: docker pull cypress/included:latest
      - name: Lancement des tests e2e en production
        run: docker run --rm -v ${{ github.workspace }}/frontend:/e2e -w /e2e cypress/included:latest cypress run --config baseUrl=http://${{ env.SERVER_PRODUCTION_IP }} --headless --browser chrome
